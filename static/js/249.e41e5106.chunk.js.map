{"version":3,"file":"static/js/249.e41e5106.chunk.js","mappings":"mJACA,SAAgB,QAAU,yBAAyB,YAAc,6BAA6B,aAAe,+B,uBCQ7G,MAMA,EANyCA,IAC9BC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAMC,OAAOC,UAChCJ,EAAAA,EAAAA,KAACK,EAAAA,GAAO,CAACC,GAAK,YAAWP,EAAMQ,KAAKH,SAAEL,EAAMS,SCEpD,EANyCC,IAAgB,IAAf,QAACC,GAAQD,EAC/C,OAAOT,EAAAA,EAAAA,KAAA,OAAAI,UACHJ,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAMQ,QAAQN,SAAEM,KAC9B,E,2CCLV,MAAMC,GAAeC,EAAAA,EAAAA,GAAiB,KAchCC,EAA4Gd,IAE1Ge,EAAAA,EAAAA,MAAA,QAAMC,SAAUhB,EAAMiB,aAAaZ,SAAA,EAC/BJ,EAAAA,EAAAA,KAAA,OAAAI,UACIJ,EAAAA,EAAAA,KAACiB,EAAAA,EAAK,CACFC,UAAWC,EAAAA,EACXX,KAAK,iBACLY,YAAY,eACZC,SAAU,CAACC,EAAAA,EAAWX,QAE9BX,EAAAA,EAAAA,KAAA,OAAAI,UACIJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,uHAOXmB,GAAmBC,EAAAA,EAAAA,GAAyC,CAACC,KAAM,wBAAhDD,CAAyEX,GCsBzG,EAnCmFd,IAC/E,IAAI2B,EAAQ3B,EAAM4B,QAGdC,EAAiBF,EAAMG,YAAYC,KAAM3B,IAAWH,EAAAA,EAAAA,KAAC+B,EAAU,CAACvB,KAAML,EAAOK,KAAsBD,GAAIJ,EAAOI,IAAtBJ,EAAOI,MAC/FyB,EAAkBN,EAAMO,aAAaH,KAAMpB,IAAYV,EAAAA,EAAAA,KAACkC,EAAW,CAACxB,QAAWA,EAAQA,SAAcA,EAAQH,MASjH,OACQO,EAAAA,EAAAA,MAAA,OAAKb,UAAWC,EAAMyB,QAAQvB,SAAA,EAC1BJ,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAMiC,YAAY/B,SAC7BwB,KAILd,EAAAA,EAAAA,MAAA,OAAKb,UAAWC,EAAMkC,aAAahC,SAAA,CAC9B4B,GAEDhC,EAAAA,EAAAA,KAAA,OAAAI,UACIJ,EAAAA,EAAAA,KAACuB,EAAgB,CAACR,SAhBpBsB,IACdtC,EAAMuC,WAAWD,EAAOE,eAAe,WAqB7B,E,wBCvClB,SAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KAPmBf,IACb,CACFC,QAASD,EAAMC,WAKM,CACrBW,WAAYI,EAAAA,EAAQJ,aAExBK,EAAAA,EAJJ,CAKEC,E","sources":["webpack://my-app/./src/Components/Messages/Dialogs.module.css?115b","Components/Messages/DialogsItem/DialogItem.tsx","Components/Messages/MessageItem/MessageItem.tsx","Components/Messages/DialogsForm.tsx","Components/Messages/Dialogs.tsx","Components/Messages/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__Bide+\",\"dialogsItem\":\"Dialogs_dialogsItem__7yhym\",\"messagesItem\":\"Dialogs_messagesItem__1CtBl\"};","import React from \"react\";\r\n//@ts-ignore\r\nimport style from './../Dialogs.module.css';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    name: string\r\n    id: number\r\n}\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    return <div className={style.dialog}>\r\n        <NavLink to={`/dialogs/${props.id}`}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem","import React from \"react\"\r\n//@ts-ignore\r\nimport style from './../Dialogs.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\nconst MessageItem: React.FC<PropsType> = ({message}) => {\r\n    return <div>\r\n        <div className={style.message}>{message}</div>\r\n    </div>\r\n}\r\n\r\nexport default MessageItem","import React from \"react\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { FieldValidatorType, maxLengthCreator, required } from \"../utils/validators/validators.ts\";\r\nimport { Textarea } from \"../common/FormsControls/FormsControls.tsx\";\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nexport type DialogFormOwnProps = {\r\n    placeholder: string\r\n    name: string\r\n    component: string | React.Component\r\n    validate: Array<FieldValidatorType>\r\n}\r\ntype PropsType = {}\r\n\r\nexport type NewMessageFormType = {\r\n    newMessageText: string\r\n}\r\n\r\nconst DialogsForm: React.FC<InjectedFormProps<NewMessageFormType, PropsType> & DialogFormOwnProps & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field \r\n                    component={Textarea} \r\n                    name=\"newMessageText\"   \r\n                    placeholder=\"your message\"\r\n                    validate={[required,  maxLength100]}/>\r\n            </div>\r\n            <div>\r\n                <button>Отправить сообщение</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default DialogsForm;\r\nexport const DialogsReduxForm = reduxForm<NewMessageFormType, PropsType>({form: 'dialogAddMessageForm'})(DialogsForm)\r\n","import React from \"react\";\r\n//@ts-ignore\r\nimport style from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogsItem/DialogItem.tsx\";\r\nimport MessageItem from \"./MessageItem/MessageItem.tsx\";\r\nimport { DialogsReduxForm } from \"./DialogsForm.tsx\";\r\nimport { InitialStateType } from \"../Redux/dialogs-reducer\";\r\nimport { DialogType, MessageType } from \"../../Types/Types\";\r\n\r\n\r\n\r\ntype DailogsFormValuesType = {\r\n    dialogs: InitialStateType\r\n    addMessage: (messageText: string) => void \r\n    dialogsData: Array<DialogType>\r\n    messagesData: Array<MessageType>\r\n}\r\n\r\ntype PropsType = {}\r\n\r\nexport type NewMessageFormType = {\r\n    newMessageText: string\r\n}\r\n\r\nconst Dialogs: React.FC<NewMessageFormType & PropsType & DailogsFormValuesType> = (props) => {\r\n    let state = props.dialogs\r\n\r\n    ///////////  Получаем диалоги и сообщения  ////////////    \r\n    let dialogsElement = state.dialogsData.map( (dialog) => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id}/>)\r\n    let messagesElement = state.messagesData.map( (message) => <MessageItem message = {message.message} key={message.id}/>)\r\n\r\n   \r\n\r\n    let addMessage = (values: NewMessageFormType) => {\r\n        props.addMessage(values.newMessageText)\r\n    }\r\n\r\n\r\n    return (\r\n            <div className={style.dialogs}>\r\n                <div className={style.dialogsItem}>\r\n                    {dialogsElement} \r\n                </div>\r\n\r\n\r\n                <div className={style.messagesItem}>\r\n                    {messagesElement}\r\n                    \r\n                    <div>\r\n                        <DialogsReduxForm onSubmit={addMessage} />\r\n                        \r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Dialogs","import React from \"react\";\r\nimport { actions} from \"../Redux/dialogs-reducer.ts\";\r\nimport Dialogs from \"./Dialogs.tsx\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../../HOC/withAuthRedirect.tsx\";\r\nimport { compose } from \"redux\";\r\nimport { AppStateType } from \"../Redux/redux-store.ts\";\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return{\r\n        dialogs: state.dialogs,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        addMessage: actions.addMessage\r\n    }),\r\n    withAuthRedirect\r\n)(Dialogs)"],"names":["props","_jsx","className","style","dialog","children","NavLink","to","id","name","_ref","message","maxLength100","maxLengthCreator","DialogsForm","_jsxs","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","DialogsReduxForm","reduxForm","form","state","dialogs","dialogsElement","dialogsData","map","DialogItem","messagesElement","messagesData","MessageItem","dialogsItem","messagesItem","values","addMessage","newMessageText","compose","connect","actions","withAuthRedirect","Dialogs"],"sourceRoot":""}