{"version":3,"file":"static/js/548.9ac4e9a9.chunk.js","mappings":"2IACA,QAAuB,uBAAvB,EAAwD,0BAAxD,EAA6F,2BAA7F,EAAuI,+BAAvI,EAAiL,2BAAjL,EAA0N,8BAA1N,EAAuQ,+BAAvQ,EAAgT,0BAAhT,EAAoV,0BAApV,EAAuX,yB,kGCYvX,MAUMA,EAAiBA,KACnB,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,KAAaC,GAAwBA,EAAMC,KAAKH,SAS/D,OAPAI,EAAAA,EAAAA,YAAU,KACNN,GAASO,EAAAA,EAAAA,OACF,KACHP,GAASQ,EAAAA,EAAAA,MAAgD,IAE9D,KAEIC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACS,UAAXR,IAAsBS,EAAAA,EAAAA,KAAA,OAAAD,SAAK,8CAE5BC,EAAAA,EAAAA,KAACC,EAAQ,KACTD,EAAAA,EAAAA,KAACE,EAAc,MACb,EAGJD,EAAyBA,KAC3B,MAAME,GAAWX,EAAAA,EAAAA,KAAaC,GAAwBA,EAAMC,KAAKS,WAC3DC,GAAkBC,EAAAA,EAAAA,QAAuB,OACxCC,EAAcC,IAAmBC,EAAAA,EAAAA,WAAkB,GAkB1D,OAPAhB,EAAAA,EAAAA,KAAY,KACW,IAADiB,EAAdH,IACuB,QAAvBG,EAAAL,EAAgBM,eAAO,IAAAD,GAAvBA,EAAyBE,eAAe,CAAEC,SAAU,WACxD,GAED,CAACT,KAEGL,EAAAA,EAAAA,MAAA,OAAKe,UAAWC,EAAeC,SAjBfC,IACnB,MAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7EjB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,EACpC,EAW0DR,SAAA,CACzDI,EAASqB,KAAI,CAACC,EAAGC,KAAU1B,EAAAA,EAAAA,KAAC2B,EAAO,CAAYC,QAASH,GAAfA,EAAEI,OAG5C7B,EAAAA,EAAAA,KAAA,OAAK8B,IAAK1B,MACR,EAIJuB,EAAqDI,EAAAA,MAAWC,IAAkB,IAAjB,QAAEJ,GAASI,EAE9E,OAAOlC,EAAAA,EAAAA,MAAA,OAAKe,UAAWC,EAAWf,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,OAAKiC,IAAKL,EAAQM,WAGtBpC,EAAAA,EAAAA,MAAA,OAAKe,UAAWC,EAAmBf,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,QAAMa,UAAWC,EAAef,SAAE6B,EAAQO,YAC1CnC,EAAAA,EAAAA,KAAA,OAAKa,UAAWC,EAAkBf,SAAE6B,EAAQA,eAI9C,IAKJ1B,EAA+BA,KACjC,MAAO0B,EAASQ,IAAc5B,EAAAA,EAAAA,UAAS,IACjCnB,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,KAAaC,GAAwBA,EAAMC,KAAKH,SAU/D,OAAOO,EAAAA,EAAAA,MAAA,OAAKe,UAAWC,EAAef,SAAA,EAClCC,EAAAA,EAAAA,KAAA,QAAAD,UACIC,EAAAA,EAAAA,KAAA,YAAUa,UAAWC,EAAoBuB,SAAWrB,GAAMoB,EAAWpB,EAAEE,cAAcoB,OAAQA,MAAOV,OAGxG5B,EAAAA,EAAAA,KAAA,QAAAD,UACIC,EAAAA,EAAAA,KAAA,UAAQa,UAAWC,EAAeyB,SAAqB,UAAXhD,EAAoBiD,QAb7CC,KAClBb,IAGLvC,GAASqD,EAAAA,EAAAA,IAAYd,IACrBQ,EAAW,IAAG,EAQkFrC,SAAC,+DAE/F,EAGV,EAtG2B4C,KAChB7C,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACHD,EAAAA,EAAAA,MAAA,OAAKe,UAAWC,EAAcf,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wBACJC,EAAAA,EAAAA,KAAA,OAAKiC,IAAKW,EAAS/B,UAAWC,QAElCd,EAAAA,EAAAA,KAACZ,EAAI,M","sources":["webpack://my-app/./src/Components/Chat/ChatPage.module.css?b934","Components/Chat/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chat\":\"ChatPage_chat__xoZo4\",\"message\":\"ChatPage_message__D40CP\",\"chatForm\":\"ChatPage_chatForm__QGBq6\",\"messageBlock\":\"ChatPage_messageBlock__rAFex\",\"chatName\":\"ChatPage_chatName__NU5dj\",\"chatMessage\":\"ChatPage_chatMessage__3PWhJ\",\"textareaChat\":\"ChatPage_textareaChat__Pg0mw\",\"btnChat\":\"ChatPage_btnChat__rNMaJ\",\"fonChat\":\"ChatPage_fonChat__Qn5WX\",\"fonImg\":\"ChatPage_fonImg__bLEyW\"};","import React, { useEffect, useRef, useState } from \"react\";\r\n//@ts-ignore\r\nimport style from './ChatPage.module.css'\r\nimport { ChatMessageAPIType } from \"../API/chat-api\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { sendMessage, startMessagesListening, stopMessagesListening } from \"../Redux/chat-reducer.ts\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AppStateType } from \"../Redux/redux-store\";\r\nimport { AnyAction } from \"redux\";\r\n//@ts-ignore\r\nimport fonChat from '../../img/fonChat1.jpg'\r\n\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return <div>\r\n        <div className={style.fonChat}>\r\n            <h1>Чат</h1>\r\n            <img src={fonChat} className={style.fonImg} />\r\n        </div>\r\n        <Chat />\r\n    </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const status = useSelector((state: AppStateType) => state.chat.status);\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening() as unknown as AnyAction);\r\n        return () => {\r\n            dispatch(stopMessagesListening() as unknown as AnyAction)\r\n        }\r\n    }, [])\r\n\r\n    return <div>\r\n        {status === 'error' && <div>Some error occured. Please refresh page.</div>}\r\n\r\n        <Messages />\r\n        <AddMessageForm />\r\n    </div>\r\n}\r\n\r\nconst Messages: React.FC<{}> = () => {\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages);\r\n    const messageAncorRef = useRef<HTMLDivElement>(null) // для автоскролла\r\n    const [isAutoScroll, setautoScrollIs] = useState<boolean>(true);\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget;\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 400) {\r\n            !isAutoScroll && setautoScrollIs(true)\r\n        } else {\r\n            isAutoScroll && setautoScrollIs(false)\r\n        }\r\n    }\r\n\r\n    // если из useSelector достаём новый массив, значит надо сделать перемотку\r\n    useSelector(() => {\r\n        if (isAutoScroll) {\r\n            messageAncorRef.current?.scrollIntoView({ behavior: 'smooth' })\r\n        }\r\n        //@ts-ignore\r\n    }, [messages] as unknown as AnyAction)\r\n\r\n    return <div className={style.message} onScroll={scrollHandler}>\r\n        {messages.map((m, index) => <Message key={m.id} message={m} />)}\r\n\r\n        {/* messageAncorRef - для автоскролла */}\r\n        <div ref={messageAncorRef}></div>\r\n    </div>\r\n}\r\n\r\n\r\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({ message }) => {\r\n\r\n    return <div className={style.chat}>\r\n        <div>\r\n            <img src={message.photo} />\r\n        </div>\r\n\r\n        <div className={style.messageBlock}>\r\n            <span className={style.chatName}>{message.userName}</span>\r\n            <div className={style.chatMessage}>{message.message}</div>\r\n\r\n        </div>\r\n\r\n    </div>\r\n})\r\n\r\n\r\n\r\nconst AddMessageForm: React.FC<{}> = () => {\r\n    const [message, setMessage] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status);\r\n\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        dispatch(sendMessage(message) as unknown as AnyAction);\r\n        setMessage('');\r\n    }\r\n    return <div className={style.chatForm}>\r\n        <span>\r\n            <textarea className={style.textareaChat} onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n        </span>\r\n\r\n        <span>\r\n            <button className={style.btnChat} disabled={status !== 'ready'} onClick={sendMessageHandler}>Отправить</button>\r\n        </span>\r\n    </div>\r\n}\r\n\r\nexport default ChatPage"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","_jsxs","children","_jsx","Messages","AddMessageForm","messages","messageAncorRef","useRef","isAutoScroll","setautoScrollIs","useState","_messageAncorRef$curr","current","scrollIntoView","behavior","className","style","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","React","_ref","src","photo","userName","setMessage","onChange","value","disabled","onClick","sendMessageHandler","sendMessage","ChatPage","fonChat"],"sourceRoot":""}